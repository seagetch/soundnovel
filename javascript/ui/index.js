/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./ui/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./ui/index.ts":
/*!*********************!*\
  !*** ./ui/index.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var ipcRenderer = __webpack_require__(/*! electron */ \"electron\").ipcRenderer;\nvar command_name = \"\";\nvar fullscreen = false;\nvar initialized = false;\nvar screen_size = [window.innerWidth, window.innerHeight];\nfunction on_element_resize(element, callback) {\n    var previous_width = element.width();\n    var observer = new MutationObserver(function (entries) {\n        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n            var e = entries_1[_i];\n            var w = $(e.target).width();\n            if (w != previous_width)\n                callback(element);\n            previous_width = w;\n        }\n    });\n    observer.observe(element[0], {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: ['style']\n    });\n    return observer;\n}\nfunction on_canvas_resize(element, callback) {\n    var observer = new MutationObserver(function (entries) {\n        for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {\n            var e = entries_2[_i];\n            callback(element);\n        }\n    });\n    observer.observe(element[0], {\n        attributes: true,\n        attributeOldValue: true,\n        attributeFilter: ['width', 'height']\n    });\n    return observer;\n}\nvar ImageViewer = (function () {\n    function ImageViewer(canvas) {\n        this.image_resource = null;\n        this.canvas = canvas;\n    }\n    ImageViewer.prototype.image_renderer = function () {\n        var ctx = this.canvas.getContext('2d');\n        var dest_rate = this.canvas.width / this.canvas.height;\n        if (this.image_resource) {\n            var src_rate = this.image_resource.width / this.image_resource.height;\n            if (src_rate > dest_rate) {\n                var y = this.image_resource.height * this.canvas.width / this.image_resource.width;\n                ctx.fillStyle = \"rgb(0, 0, 0)\";\n                ctx.fillRect(0, 0, this.canvas.width, (this.canvas.height - y) / 2);\n                ctx.fillRect(0, (this.canvas.height + y) / 2, this.canvas.width, (this.canvas.height - y) / 2);\n                ctx.drawImage(this.image_resource, 0, 0, this.image_resource.width, this.image_resource.height, 0, (this.canvas.height - y) / 2, this.canvas.width, y);\n            }\n            else {\n                var x = this.image_resource.width * this.canvas.height / this.image_resource.height;\n                ctx.fillStyle = \"rgb(0, 0, 0)\";\n                ctx.fillRect(0, 0, (this.canvas.width - x) / 2, this.canvas.height);\n                ctx.fillRect((this.canvas.width + x) / 2, 0, (this.canvas.width - x) / 2, this.canvas.height);\n                ctx.drawImage(this.image_resource, 0, 0, this.image_resource.width, this.image_resource.height, (this.canvas.width - x) / 2, 0, x, this.canvas.height);\n            }\n        }\n        else {\n            ctx.fillStyle = \"rgb(0, 0, 0)\";\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n    };\n    ImageViewer.prototype.truncated_load = function (filename, bounds) {\n        var canvas = $(\"<canvas>\").get()[0];\n        return new Promise(function (resolve, reject) {\n            var i = new Image();\n            var ctx = canvas.getContext('2d');\n            i.onload = function (ev) {\n                canvas.width = i.width * bounds[1][0];\n                canvas.height = i.height * bounds[1][1];\n                ctx.drawImage(i, i.width * bounds[0][0], i.height * bounds[0][1], canvas.width, canvas.height, 0, 0, canvas.width, canvas.height);\n                resolve(canvas);\n            };\n            i.src = filename;\n        });\n    };\n    ImageViewer.prototype.tiled_load = function (image_src) {\n        var off_canvas = $(\"<canvas>\").get()[0];\n        return new Promise(function (resolve, reject) {\n            var ctx = off_canvas.getContext('2d');\n            Promise.all(image_src.slice(1, image_src.length).map(function (elem) {\n                var i = new Image();\n                return new Promise(function (resolve, reject) {\n                    i.onload = function (ev) {\n                        resolve(i);\n                    };\n                    i.src = elem;\n                });\n            })).then(function (images) {\n                var red_w;\n                var red_h;\n                var ofs_x = 0, ofs_y = 0;\n                if (image_src[0] == \"horizontal\") {\n                    red_w = function (x, y, _1, _2) { return x + y; };\n                    red_h = function (x, y, _1, _2) { return (x > y) ? x : y; };\n                    ofs_x = 1;\n                }\n                else {\n                    red_h = function (x, y, _1, _2) { return x + y; };\n                    red_w = function (x, y, _1, _2) { return (x > y) ? x : y; };\n                    ofs_y = 1;\n                }\n                var w = images.map(function (i) { return i.width; }).reduce(red_w);\n                var h = images.map(function (i) { return i.height; }).reduce(red_h);\n                off_canvas.width = w;\n                off_canvas.height = h;\n                var x = 0, y = 0;\n                for (var _i = 0, images_1 = images; _i < images_1.length; _i++) {\n                    var i = images_1[_i];\n                    ctx.drawImage(i, x, y);\n                    x += ofs_x * i.width;\n                    y += ofs_y * i.height;\n                }\n                resolve(off_canvas);\n            });\n        });\n    };\n    ImageViewer.prototype.file_load = function (filename) {\n        return new Promise(function (resolve, reject) {\n            var image = new Image();\n            image.onload = function (ev) {\n                resolve(image);\n            };\n            image.src = filename;\n        });\n    };\n    ImageViewer.prototype.load = function (image_src) {\n        var _this = this;\n        if (!$(this.canvas).attr(\"observer\")) {\n            var canvas_observer = on_canvas_resize($(this.canvas), function (elem) {\n                _this.image_renderer();\n            });\n            $(this.canvas).attr(\"observer\", 1);\n        }\n        var promise = null;\n        if (Array.isArray(image_src)) {\n            switch (image_src[0]) {\n                case \"truncate\":\n                    promise = this.truncated_load(image_src[1], image_src[2]);\n                    break;\n                case \"horizontal\":\n                case \"vertical\":\n                    promise = this.tiled_load(image_src);\n                    break;\n                default:\n                    console.log(\"Unknown command: \" + image_src[0]);\n            }\n        }\n        else if (typeof image_src == \"string\")\n            promise = this.file_load(image_src);\n        if (promise) {\n            promise.then(function (canvas) {\n                _this.image_resource = canvas;\n                _this.image_renderer();\n            });\n        }\n        else {\n            alert(\"Unknows image src=\" + image_src);\n        }\n    };\n    return ImageViewer;\n}());\n;\nvar AudioPlayer = (function () {\n    function AudioPlayer(sound) {\n        this.audio = null;\n        this.observer = null;\n        this.sound = sound;\n    }\n    AudioPlayer.prototype.create_audio = function (filename) {\n        return new Audio(filename);\n    };\n    AudioPlayer.prototype.generate_button = function (button_info) {\n        var cmd = button_info.command;\n        var button = $(\"<span>\").attr(\"id\", button_info.name).css({\n            \"margin-left\": \"0\",\n            \"margin-top\": \"8\",\n            \"margin-bottom\": \"8\",\n            \"display\": \"inline-block\",\n            \"font-size\": \"32px\",\n            \"width\": \"48px\",\n            \"height\": \"48px\",\n            \"text-align\": \"center\",\n            \"border-radius\": \"50%\",\n        }).hover(function (ev) {\n            var target = $(ev.target);\n            if (ev.buttons & 1)\n                target.css({ \"color\": \"black\", \"background-color\": \"white\" });\n            else\n                target.css({ \"color\": \"inherit\", \"background-color\": \"#808080\" });\n        }, function (ev) {\n            var target = $(ev.target);\n            target.css({ \"color\": \"inherit\", \"background-color\": \"transparent\" });\n        }).on(\"mousedown\", function (ev) {\n            var target = $(ev.target);\n            if (ev.buttons & 1)\n                target.css({ \"color\": \"black\", \"background-color\": \"white\" });\n            else\n                target.css({ \"color\": \"inherit\", \"background-color\": \"#808080\" });\n        }).on(\"mouseup\", function (ev) {\n            var target = $(ev.target);\n            target.css({ \"color\": \"inherit\", \"background-color\": \"transparent\" });\n            if (ev.button == 0) {\n                ev.target.trigger();\n            }\n        });\n        var button_ = button[0];\n        button_.trigger = function () {\n            var states = $(button).attr(\"states\");\n            cmd[states][2]();\n        };\n        button_.trigger_force = function (states) {\n            cmd[states][2]();\n        };\n        new MutationObserver(function (entries) {\n            for (var _i = 0, entries_3 = entries; _i < entries_3.length; _i++) {\n                var e = entries_3[_i];\n                var states = $(e.target).attr(\"states\");\n                $(e.target).html(button_info.command[states][0]);\n            }\n        }).observe(button[0], {\n            attributes: true,\n            attributeFilter: [\"states\"]\n        });\n        button.attr(\"states\", button_info.state());\n        return button;\n    };\n    AudioPlayer.prototype.bind_events = function () {\n        var _this = this;\n        var scanvas = this.sound.find('#sound-progress')[0];\n        $(this.audio).on(\"ended\", function (event) {\n            if (_this.observer)\n                _this.observer.disconnect();\n            ipcRenderer.send(\"command\", command_name);\n            _this.audio = null;\n        });\n        $(this.audio).on(\"timeupdate\", function () {\n            if (_this.audio) {\n                var rate = _this.audio.currentTime / _this.audio.duration;\n                var w = scanvas.width, h = scanvas.height;\n                var ctx = scanvas.getContext('2d');\n                ctx.fillStyle = \"white\";\n                ctx.fillRect(0, 0, w * rate, 32);\n                ctx.fillStyle = \"rgb(96, 96, 96)\";\n                ctx.fillRect(w * rate, 0, w - w * rate, 32);\n            }\n        });\n        $(scanvas).off(\"mousedown\").on(\"mousedown\", function (ev) {\n            var mev = ev;\n            if (_this.audio && _this.audio.duration > 0) {\n                var rate = mev.offsetX / scanvas.width;\n                _this.audio.currentTime = rate * _this.audio.duration;\n            }\n        });\n        $(this.audio).on(\"pause\", function () {\n            _this.sound.find(\"#Play\").attr(\"states\", \"Play\");\n        });\n        $(this.audio).on(\"play\", function () {\n            _this.sound.find(\"#Play\").attr(\"states\", \"Pause\");\n        });\n        $(this.audio).on(\"volumechange\", function () {\n            if (_this.audio.muted) {\n                _this.sound.find(\"#Mute\").attr(\"states\", \"Unmute\");\n            }\n            else\n                _this.sound.find(\"#Mute\").attr(\"states\", \"Mute\");\n        });\n        var sound_op_left = this.sound.find(\"#sound-ops\");\n        var sound_op_right = this.sound.find(\"#sound-ops-right\");\n        this.sound.off(\"mouseenter\").on(\"mouseenter\", function (ev) {\n            _this.sound.fadeTo(250, 0.5);\n        });\n        this.sound.off(\"mouseleave\").on(\"mouseleave\", function (ev) {\n            _this.sound.fadeTo(250, 0.0);\n        });\n        var progress_size = function (elem) {\n            scanvas.width = (_this.sound.innerWidth() - sound_op_left.outerWidth() - sound_op_right.outerWidth()) - 20;\n            scanvas.style.width = scanvas.width + \"px\";\n        };\n        this.observer = on_element_resize(this.sound, progress_size);\n        progress_size();\n        $(window).off(\"keydown\").on(\"keydown\", function (event) {\n            var ke = event;\n            if (_this.audio) {\n                if (ke.key == 'Enter') {\n                    $(\"#sound\").find(\"#Next\")[0].trigger();\n                }\n                else if (ke.keyCode == 32) {\n                    $(\"#sound\").find(\"#Play\")[0].trigger();\n                }\n                else if (ke.keyCode == 37) {\n                    $(\"#sound\").find(\"#Backward\")[0].trigger();\n                }\n                else if (ke.keyCode == 39) {\n                    $(\"#sound\").find(\"#Forward\")[0].trigger();\n                }\n                else if (ke.key == 'Backspace') {\n                    $(\"#sound\").find(\"#Cancel\")[0].trigger();\n                }\n            }\n            if (ke.key == 'Escape') {\n                $(\"#sound\").find(\"#Fullscreen\")[0].trigger_force(\"Unfullscreen\");\n            }\n        });\n    };\n    AudioPlayer.prototype.load = function (filename) {\n        var _this = this;\n        if (filename) {\n            this.audio = this.create_audio(filename);\n            var audio_rewind = function () { _this.audio.currentTime = 0; };\n            var audio_rewind10 = function () { _this.audio.currentTime -= 10; };\n            var audio_forward10 = function () { _this.audio.currentTime += 10; };\n            var audio_forward = function () {\n                _this.audio.pause();\n                if (_this.observer)\n                    _this.observer.disconnect();\n                ipcRenderer.send(\"command\", command_name);\n                _this.audio = null;\n            };\n            var audio_mute = function () { _this.audio.muted = true; };\n            var audio_unmute = function () { _this.audio.muted = false; };\n            var scenario_terminate = function () {\n                _this.audio.pause();\n                if (_this.observer)\n                    _this.observer.disconnect();\n                ipcRenderer.send(\"terminate\", command_name);\n                _this.audio = null;\n            };\n            var audio_play = function () { _this.audio.play(); };\n            var audio_pause = function () { _this.audio.pause(); };\n            var set_fullscreen = function () { ipcRenderer.send(\"fullscreen\", true); };\n            var set_unfullscreen = function () { ipcRenderer.send(\"fullscreen\", false); };\n            var buttons = [\n                {\n                    name: \"Previous\",\n                    state: function () { return \"Previous\"; },\n                    side: \"left\",\n                    command: { \"Previous\": [\"⏮\", \"Previous\", audio_rewind] }\n                },\n                {\n                    name: \"Backward\",\n                    state: function () { return \"Backward\"; },\n                    side: \"left\",\n                    command: { \"Backward\": [\"⏪\", \"Backward\", audio_rewind10] }\n                },\n                {\n                    name: \"Play\",\n                    state: function () { return _this.audio.paused ? \"Play\" : \"Paused\"; },\n                    side: \"left\",\n                    command: {\n                        \"Pause\": [\"⏸\", \"Play\", audio_pause],\n                        \"Play\": [\"⏵\", \"Pause\", audio_play]\n                    }\n                },\n                {\n                    name: \"Forward\",\n                    state: function () { return \"Forward\"; },\n                    side: \"left\",\n                    command: { \"Forward\": [\"⏩\", \"Forward\", audio_forward10] }\n                },\n                {\n                    name: \"Next\",\n                    state: function () { return \"Next\"; },\n                    side: \"left\",\n                    command: { \"Next\": [\"⏭\", \"Next\", audio_forward] }\n                },\n                {\n                    name: \"Mute\",\n                    state: function () { return _this.audio.muted ? \"Unmute\" : \"Mute\"; },\n                    side: \"right\",\n                    command: {\n                        \"Mute\": [\"🔈\", \"Unmute\", audio_mute],\n                        \"Unmute\": [\"🔇\", \"Mute\", audio_unmute]\n                    }\n                },\n                {\n                    name: \"Cancel\",\n                    state: function () { return \"Cancel\"; },\n                    side: \"left\",\n                    command: { \"Cancel\": [\"⏹\", \"Cancel\", scenario_terminate] }\n                },\n                {\n                    name: \"Fullscreen\",\n                    state: function () { return fullscreen ? \"Unfullscreen\" : \"Fullscreen\"; },\n                    side: \"right\",\n                    command: {\n                        \"Fullscreen\": [\"⊞\", \"Unfullscreen\", set_fullscreen],\n                        \"Unfullscreen\": [\"⊟\", \"Fullscreen\", set_unfullscreen]\n                    }\n                }\n            ];\n            var sound_op_left = this.sound.find(\"#sound-ops\").html(\"\");\n            var sound_op_right = this.sound.find(\"#sound-ops-right\").html(\"\");\n            for (var i = 0; i < buttons.length; i++) {\n                var button = this.generate_button(buttons[i]);\n                button.appendTo((buttons[i].side == \"left\") ? sound_op_left : sound_op_right);\n            }\n            this.bind_events();\n        }\n        else {\n            this.audio = null;\n            this.sound.off(\"mouseenter\");\n            this.sound.css({ \"opacity\": \"0.0\" });\n        }\n    };\n    AudioPlayer.prototype.play = function () {\n        if (this.audio)\n            this.audio.play();\n        else {\n            ipcRenderer.send(\"command\", command_name);\n        }\n    };\n    return AudioPlayer;\n}());\nvar image_viewer = null;\nfunction scene(command) {\n    var image_src = command[2];\n    var canvas = $(\"#canvas\")[0];\n    if (!image_viewer)\n        image_viewer = new ImageViewer(canvas);\n    image_viewer.load(image_src);\n    var audio_player = new AudioPlayer($(\"#sound\"));\n    audio_player.load(command[1]);\n    audio_player.play();\n}\nfunction ask(command) {\n    var options = command[1];\n    var location = options[\"location\"];\n    var x = location ? location[0] : 0, y = location ? location[1] : 0;\n    var fontsize = options[\"size\"] ? options[\"size\"] : 40;\n    var layout = options[\"layout\"];\n    var direction = layout ? layout[\"direction\"] : \"vertical\";\n    var ofs_x = layout ? layout[\"offset\"][0] : 0, ofs_y = layout ? layout[\"offset\"][1] : 100;\n    var line_size = layout ? layout[\"line-size\"] : null;\n    var color_info = options[\"color\"];\n    var color = color_info ? color_info[\"base\"] : \"rgb(240, 240, 240)\";\n    var hcolor = color_info ? color_info[\"hover\"] : \"rgb(240, 224, 0)\";\n    var scolor = color_info ? color_info[\"selected\"] : \"rgb(240, 0, 0)\";\n    var candidates = command[1][\"candidates\"];\n    var selection = $(\"#selection\").html(\"\").css({\n        \"display\": \"block\"\n    });\n    var observer = null;\n    var on_update = function (ev) {\n        var current_rate = window.innerWidth / window.innerHeight;\n        var orig_rate = screen_size[0] / screen_size[1];\n        var scale = 1.0, offset_x = 0, offset_y = 0;\n        if (screen_size[0] != window.innerWidth) {\n            if (current_rate < orig_rate) {\n                scale = window.innerWidth / screen_size[0];\n                offset_y = (window.innerHeight - screen_size[1] * scale) / 2;\n            }\n            else {\n                scale = window.innerHeight / screen_size[1];\n                offset_x = (window.innerWidth - screen_size[0] * scale) / 2;\n            }\n        }\n        selection = $(\"#selection\").html(\"\").css({\n            \"position\": \"absolute\",\n            \"top\": (scale * y + offset_y) + \"px\",\n            \"left\": (scale * x + offset_x) + \"px\",\n            \"z-index\": \"100\",\n            \"border-color\": \"#000000\",\n            \"width\": (direction == \"horizontal\" && line_size) ? (scale * ofs_x * line_size) + \"px\" : \"auto\",\n            \"height\": (direction == \"vertical\" && line_size) ? (scale * ofs_y * line_size) + \"px\" : \"auto\"\n        });\n        var _loop_1 = function (c) {\n            $(\"<div>\").html(c).css({\n                \"font-size\": (fontsize * scale).toString() + \"px\",\n                \"font-weight\": \"700\",\n                \"flex-direction\": (direction == \"vertical\") ? \"column\" : \"row\",\n                \"color\": color,\n                \"display\": (direction == \"vertical\") ? \"block\" : \"inline-block\",\n                \"padding\": \"0\",\n                \"margin\": \"0\",\n                \"height\": (scale * ofs_y) + \"px\",\n                \"width\": (direction == \"vertical\") ? \"auto\" : (scale * ofs_x) + \"px\",\n                \"z-index\": (fontsize * scale).toString() + \"px\"\n            }).hover(function (ev) {\n                $(ev.target).css({ \"color\": hcolor });\n            }, function (ev) {\n                $(ev.target).css({ \"color\": color });\n            }).mousedown(function (ev) {\n                $(ev.target).css({ \"color\": scolor });\n            }).click(function (ev) {\n                selection.css({ \"display\": \"none\" });\n                if (observer)\n                    observer.disconnect();\n                ipcRenderer.send(\"set-variable\", options[\"variable\"], c);\n                ipcRenderer.send(\"command\", command_name);\n            }).appendTo(selection);\n        };\n        for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n            var c = candidates_1[_i];\n            _loop_1(c);\n        }\n    };\n    observer = on_element_resize(selection, on_update);\n    on_update();\n}\nipcRenderer.on(\"command\", function (event, command) {\n    if (!initialized) {\n        initialized = true;\n        var w = window.innerWidth, h = window.innerHeight;\n        var canvas_1 = document.getElementById(\"canvas\");\n        canvas_1.width = w;\n        canvas_1.height = h;\n        $(window).on(\"resize\", function (ev) {\n            canvas_1.width = window.innerWidth;\n            canvas_1.height = window.innerHeight;\n            $(\"#selection\").width(1);\n        });\n    }\n    command_name = command[0];\n    if (command[0] == \"scene\") {\n        scene(command);\n    }\n    else if (command[0] == \"ask\") {\n        ask(command);\n    }\n    else if (command[0] == \"title\") {\n        document.title = command[1];\n        ipcRenderer.send(\"command\", command_name);\n    }\n    else {\n        ipcRenderer.send(\"command-error\", command_name);\n    }\n});\nipcRenderer.on(\"fullscreen\", function (event, value) {\n    fullscreen = value;\n    $(\"#sound\").find(\"#Fullscreen\").attr(\"states\", fullscreen ? \"Unfullscreen\" : \"Fullscreen\");\n    console.log(\"fullscreen=\" + value);\n});\nipcRenderer.on(\"screen\", function (event, value) {\n    screen_size = value;\n    console.log(\"screen=\" + value);\n});\nipcRenderer.send(\"start\");\n\n\n//# sourceURL=webpack:///./ui/index.ts?");

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"electron\");\n\n//# sourceURL=webpack:///external_%22electron%22?");

/***/ })

/******/ });